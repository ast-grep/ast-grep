{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "bashFields": {
      "type": "string",
      "enum": [
        "alternative",
        "argument",
        "body",
        "condition",
        "consequence",
        "descriptor",
        "destination",
        "fallthrough",
        "index",
        "initializer",
        "left",
        "name",
        "operator",
        "redirect",
        "right",
        "termination",
        "update",
        "value"
      ]
    },
    "bashNodes": {
      "type": "string",
      "enum": [
        "ansi_c_string",
        "arithmetic_expansion",
        "array",
        "binary_expression",
        "brace_expression",
        "c_style_for_statement",
        "case_item",
        "case_statement",
        "command",
        "command_name",
        "command_substitution",
        "comment",
        "compound_statement",
        "concatenation",
        "declaration_command",
        "do_group",
        "elif_clause",
        "else_clause",
        "expansion",
        "extglob_pattern",
        "file_descriptor",
        "file_redirect",
        "for_statement",
        "function_definition",
        "heredoc_body",
        "heredoc_content",
        "heredoc_end",
        "heredoc_redirect",
        "heredoc_start",
        "herestring_redirect",
        "if_statement",
        "list",
        "negated_command",
        "number",
        "parenthesized_expression",
        "pipeline",
        "postfix_expression",
        "process_substitution",
        "program",
        "raw_string",
        "redirected_statement",
        "regex",
        "simple_expansion",
        "special_variable_name",
        "string",
        "string_content",
        "subscript",
        "subshell",
        "ternary_expression",
        "test_command",
        "test_operator",
        "translated_string",
        "unary_expression",
        "unset_command",
        "variable_assignment",
        "variable_assignments",
        "variable_name",
        "while_statement",
        "word"
      ]
    },
    "cFields": {
      "type": "string",
      "enum": [
        "alternative",
        "argument",
        "arguments",
        "assembly_code",
        "body",
        "clobbers",
        "condition",
        "consequence",
        "constraint",
        "declarator",
        "designator",
        "directive",
        "end",
        "field",
        "filter",
        "function",
        "goto_labels",
        "index",
        "initializer",
        "input_operands",
        "label",
        "left",
        "member",
        "name",
        "operand",
        "operator",
        "output_operands",
        "parameters",
        "path",
        "prefix",
        "register",
        "right",
        "size",
        "start",
        "symbol",
        "type",
        "underlying_type",
        "update"
      ]
    },
    "cNodes": {
      "type": "string",
      "enum": [
        "abstract_array_declarator",
        "abstract_function_declarator",
        "abstract_parenthesized_declarator",
        "abstract_pointer_declarator",
        "alignas_qualifier",
        "alignof_expression",
        "argument_list",
        "array_declarator",
        "assignment_expression",
        "attribute",
        "attribute_declaration",
        "attribute_specifier",
        "attributed_declarator",
        "attributed_statement",
        "binary_expression",
        "bitfield_clause",
        "break_statement",
        "call_expression",
        "case_statement",
        "cast_expression",
        "char_literal",
        "character",
        "comma_expression",
        "comment",
        "compound_literal_expression",
        "compound_statement",
        "concatenated_string",
        "conditional_expression",
        "continue_statement",
        "declaration",
        "declaration_list",
        "do_statement",
        "else_clause",
        "enum_specifier",
        "enumerator",
        "enumerator_list",
        "escape_sequence",
        "expression_statement",
        "extension_expression",
        "false",
        "field_declaration",
        "field_declaration_list",
        "field_designator",
        "field_expression",
        "field_identifier",
        "for_statement",
        "function_declarator",
        "function_definition",
        "generic_expression",
        "gnu_asm_clobber_list",
        "gnu_asm_expression",
        "gnu_asm_goto_list",
        "gnu_asm_input_operand",
        "gnu_asm_input_operand_list",
        "gnu_asm_output_operand",
        "gnu_asm_output_operand_list",
        "gnu_asm_qualifier",
        "goto_statement",
        "identifier",
        "if_statement",
        "init_declarator",
        "initializer_list",
        "initializer_pair",
        "labeled_statement",
        "linkage_specification",
        "macro_type_specifier",
        "ms_based_modifier",
        "ms_call_modifier",
        "ms_declspec_modifier",
        "ms_pointer_modifier",
        "ms_restrict_modifier",
        "ms_signed_ptr_modifier",
        "ms_unaligned_ptr_modifier",
        "ms_unsigned_ptr_modifier",
        "null",
        "number_literal",
        "offsetof_expression",
        "parameter_declaration",
        "parameter_list",
        "parenthesized_declarator",
        "parenthesized_expression",
        "pointer_declarator",
        "pointer_expression",
        "preproc_arg",
        "preproc_call",
        "preproc_def",
        "preproc_defined",
        "preproc_directive",
        "preproc_elif",
        "preproc_elifdef",
        "preproc_else",
        "preproc_function_def",
        "preproc_if",
        "preproc_ifdef",
        "preproc_include",
        "preproc_params",
        "primitive_type",
        "return_statement",
        "seh_except_clause",
        "seh_finally_clause",
        "seh_leave_statement",
        "seh_try_statement",
        "sized_type_specifier",
        "sizeof_expression",
        "statement_identifier",
        "storage_class_specifier",
        "string_content",
        "string_literal",
        "struct_specifier",
        "subscript_designator",
        "subscript_expression",
        "subscript_range_designator",
        "switch_statement",
        "system_lib_string",
        "translation_unit",
        "true",
        "type_definition",
        "type_descriptor",
        "type_identifier",
        "type_qualifier",
        "unary_expression",
        "union_specifier",
        "update_expression",
        "variadic_parameter",
        "while_statement"
      ]
    },
    "cppFields": {
      "type": "string",
      "enum": [
        "alternative",
        "argument",
        "arguments",
        "assembly_code",
        "base",
        "body",
        "captures",
        "clobbers",
        "condition",
        "consequence",
        "constraint",
        "declarator",
        "default_type",
        "default_value",
        "delimiter",
        "designator",
        "directive",
        "end",
        "field",
        "filter",
        "function",
        "goto_labels",
        "indices",
        "initializer",
        "input_operands",
        "label",
        "left",
        "length",
        "member",
        "message",
        "name",
        "operand",
        "operator",
        "output_operands",
        "parameters",
        "path",
        "pattern",
        "placement",
        "prefix",
        "register",
        "requirements",
        "right",
        "scope",
        "size",
        "start",
        "symbol",
        "template_parameters",
        "type",
        "update"
      ]
    },
    "cppNodes": {
      "type": "string",
      "enum": [
        "abstract_array_declarator",
        "abstract_function_declarator",
        "abstract_parenthesized_declarator",
        "abstract_pointer_declarator",
        "abstract_reference_declarator",
        "access_specifier",
        "alias_declaration",
        "alignas_qualifier",
        "alignof_expression",
        "argument_list",
        "array_declarator",
        "assignment_expression",
        "attribute",
        "attribute_declaration",
        "attribute_specifier",
        "attributed_declarator",
        "attributed_statement",
        "auto",
        "base_class_clause",
        "binary_expression",
        "bitfield_clause",
        "break_statement",
        "call_expression",
        "case_statement",
        "cast_expression",
        "catch_clause",
        "char_literal",
        "character",
        "class_specifier",
        "co_await_expression",
        "co_return_statement",
        "co_yield_statement",
        "comma_expression",
        "comment",
        "compound_literal_expression",
        "compound_requirement",
        "compound_statement",
        "concatenated_string",
        "concept_definition",
        "condition_clause",
        "conditional_expression",
        "constraint_conjunction",
        "constraint_disjunction",
        "continue_statement",
        "declaration",
        "declaration_list",
        "decltype",
        "default_method_clause",
        "delete_expression",
        "delete_method_clause",
        "dependent_name",
        "dependent_type",
        "destructor_name",
        "do_statement",
        "else_clause",
        "enum_specifier",
        "enumerator",
        "enumerator_list",
        "escape_sequence",
        "explicit_function_specifier",
        "expression_statement",
        "extension_expression",
        "false",
        "field_declaration",
        "field_declaration_list",
        "field_designator",
        "field_expression",
        "field_identifier",
        "field_initializer",
        "field_initializer_list",
        "fold_expression",
        "for_range_loop",
        "for_statement",
        "friend_declaration",
        "function_declarator",
        "function_definition",
        "generic_expression",
        "gnu_asm_clobber_list",
        "gnu_asm_expression",
        "gnu_asm_goto_list",
        "gnu_asm_input_operand",
        "gnu_asm_input_operand_list",
        "gnu_asm_output_operand",
        "gnu_asm_output_operand_list",
        "gnu_asm_qualifier",
        "goto_statement",
        "identifier",
        "if_statement",
        "init_declarator",
        "init_statement",
        "initializer_list",
        "initializer_pair",
        "labeled_statement",
        "lambda_capture_initializer",
        "lambda_capture_specifier",
        "lambda_default_capture",
        "lambda_expression",
        "linkage_specification",
        "literal_suffix",
        "ms_based_modifier",
        "ms_call_modifier",
        "ms_declspec_modifier",
        "ms_pointer_modifier",
        "ms_restrict_modifier",
        "ms_signed_ptr_modifier",
        "ms_unaligned_ptr_modifier",
        "ms_unsigned_ptr_modifier",
        "namespace_alias_definition",
        "namespace_definition",
        "namespace_identifier",
        "nested_namespace_specifier",
        "new_declarator",
        "new_expression",
        "noexcept",
        "null",
        "number_literal",
        "offsetof_expression",
        "operator_cast",
        "operator_name",
        "optional_parameter_declaration",
        "optional_type_parameter_declaration",
        "parameter_declaration",
        "parameter_list",
        "parameter_pack_expansion",
        "parenthesized_declarator",
        "parenthesized_expression",
        "placeholder_type_specifier",
        "pointer_declarator",
        "pointer_expression",
        "pointer_type_declarator",
        "preproc_arg",
        "preproc_call",
        "preproc_def",
        "preproc_defined",
        "preproc_directive",
        "preproc_elif",
        "preproc_elifdef",
        "preproc_else",
        "preproc_function_def",
        "preproc_if",
        "preproc_ifdef",
        "preproc_include",
        "preproc_params",
        "primitive_type",
        "pure_virtual_clause",
        "qualified_identifier",
        "raw_string_content",
        "raw_string_delimiter",
        "raw_string_literal",
        "ref_qualifier",
        "reference_declarator",
        "requirement_seq",
        "requires_clause",
        "requires_expression",
        "return_statement",
        "seh_except_clause",
        "seh_finally_clause",
        "seh_leave_statement",
        "seh_try_statement",
        "simple_requirement",
        "sized_type_specifier",
        "sizeof_expression",
        "statement_identifier",
        "static_assert_declaration",
        "storage_class_specifier",
        "string_content",
        "string_literal",
        "struct_specifier",
        "structured_binding_declarator",
        "subscript_argument_list",
        "subscript_designator",
        "subscript_expression",
        "subscript_range_designator",
        "switch_statement",
        "system_lib_string",
        "template_argument_list",
        "template_declaration",
        "template_function",
        "template_instantiation",
        "template_method",
        "template_parameter_list",
        "template_template_parameter_declaration",
        "template_type",
        "this",
        "throw_specifier",
        "throw_statement",
        "trailing_return_type",
        "translation_unit",
        "true",
        "try_statement",
        "type_definition",
        "type_descriptor",
        "type_identifier",
        "type_parameter_declaration",
        "type_qualifier",
        "type_requirement",
        "unary_expression",
        "union_specifier",
        "update_expression",
        "user_defined_literal",
        "using_declaration",
        "variadic_declarator",
        "variadic_parameter_declaration",
        "variadic_type_parameter_declaration",
        "virtual_specifier",
        "while_statement"
      ]
    },
    "csharpFields": {
      "type": "string",
      "enum": [
        "accessors",
        "alias",
        "alternative",
        "argument",
        "arguments",
        "body",
        "condition",
        "consequence",
        "content",
        "expression",
        "function",
        "initializer",
        "left",
        "name",
        "operator",
        "parameters",
        "pattern",
        "qualifier",
        "rank",
        "returns",
        "right",
        "subscript",
        "type",
        "type_parameters",
        "update"
      ]
    },
    "csharpNodes": {
      "type": "string",
      "enum": [
        "accessor_declaration",
        "accessor_list",
        "alias_qualified_name",
        "and_pattern",
        "anonymous_method_expression",
        "anonymous_object_creation_expression",
        "argument",
        "argument_list",
        "array_creation_expression",
        "array_rank_specifier",
        "array_type",
        "arrow_expression_clause",
        "as_expression",
        "assignment_expression",
        "attribute",
        "attribute_argument",
        "attribute_argument_list",
        "attribute_list",
        "attribute_target_specifier",
        "await_expression",
        "base_list",
        "binary_expression",
        "block",
        "boolean_literal",
        "bracketed_argument_list",
        "bracketed_parameter_list",
        "break_statement",
        "calling_convention",
        "cast_expression",
        "catch_clause",
        "catch_declaration",
        "catch_filter_clause",
        "character_literal",
        "character_literal_content",
        "checked_expression",
        "checked_statement",
        "class_declaration",
        "comment",
        "compilation_unit",
        "conditional_access_expression",
        "conditional_expression",
        "constant_pattern",
        "constructor_constraint",
        "constructor_declaration",
        "constructor_initializer",
        "continue_statement",
        "conversion_operator_declaration",
        "declaration_expression",
        "declaration_list",
        "declaration_pattern",
        "default_expression",
        "delegate_declaration",
        "destructor_declaration",
        "discard",
        "do_statement",
        "element_access_expression",
        "element_binding_expression",
        "empty_statement",
        "enum_declaration",
        "enum_member_declaration",
        "enum_member_declaration_list",
        "escape_sequence",
        "event_declaration",
        "event_field_declaration",
        "explicit_interface_specifier",
        "expression_statement",
        "extern_alias_directive",
        "field_declaration",
        "file_scoped_namespace_declaration",
        "finally_clause",
        "fixed_statement",
        "for_statement",
        "foreach_statement",
        "from_clause",
        "function_pointer_parameter",
        "function_pointer_type",
        "generic_name",
        "global_attribute",
        "global_statement",
        "goto_statement",
        "group_clause",
        "identifier",
        "if_statement",
        "implicit_array_creation_expression",
        "implicit_object_creation_expression",
        "implicit_parameter",
        "implicit_stackalloc_expression",
        "implicit_type",
        "indexer_declaration",
        "initializer_expression",
        "integer_literal",
        "interface_declaration",
        "interpolated_string_expression",
        "interpolation",
        "interpolation_alignment_clause",
        "interpolation_brace",
        "interpolation_format_clause",
        "interpolation_quote",
        "interpolation_start",
        "invocation_expression",
        "is_expression",
        "is_pattern_expression",
        "join_clause",
        "join_into_clause",
        "labeled_statement",
        "lambda_expression",
        "let_clause",
        "list_pattern",
        "local_declaration_statement",
        "local_function_statement",
        "lock_statement",
        "makeref_expression",
        "member_access_expression",
        "member_binding_expression",
        "method_declaration",
        "modifier",
        "namespace_declaration",
        "negated_pattern",
        "null_literal",
        "nullable_type",
        "object_creation_expression",
        "operator_declaration",
        "or_pattern",
        "order_by_clause",
        "parameter",
        "parameter_list",
        "parenthesized_expression",
        "parenthesized_pattern",
        "parenthesized_variable_designation",
        "pointer_type",
        "positional_pattern_clause",
        "postfix_unary_expression",
        "predefined_type",
        "prefix_unary_expression",
        "preproc_arg",
        "preproc_define",
        "preproc_elif",
        "preproc_else",
        "preproc_endregion",
        "preproc_error",
        "preproc_if",
        "preproc_line",
        "preproc_nullable",
        "preproc_pragma",
        "preproc_region",
        "preproc_undef",
        "preproc_warning",
        "primary_constructor_base_type",
        "property_declaration",
        "property_pattern_clause",
        "qualified_name",
        "query_expression",
        "range_expression",
        "raw_string_content",
        "raw_string_end",
        "raw_string_literal",
        "raw_string_start",
        "real_literal",
        "record_declaration",
        "recursive_pattern",
        "ref_expression",
        "ref_type",
        "reftype_expression",
        "refvalue_expression",
        "relational_pattern",
        "return_statement",
        "scoped_type",
        "select_clause",
        "shebang_directive",
        "sizeof_expression",
        "stackalloc_expression",
        "string_content",
        "string_literal",
        "string_literal_content",
        "string_literal_encoding",
        "struct_declaration",
        "subpattern",
        "switch_body",
        "switch_expression",
        "switch_expression_arm",
        "switch_section",
        "switch_statement",
        "throw_expression",
        "throw_statement",
        "try_statement",
        "tuple_element",
        "tuple_expression",
        "tuple_pattern",
        "tuple_type",
        "type_argument_list",
        "type_parameter",
        "type_parameter_constraint",
        "type_parameter_constraints_clause",
        "type_parameter_list",
        "type_pattern",
        "typeof_expression",
        "unary_expression",
        "unsafe_statement",
        "using_directive",
        "using_statement",
        "var_pattern",
        "variable_declaration",
        "variable_declarator",
        "verbatim_string_literal",
        "when_clause",
        "where_clause",
        "while_statement",
        "with_expression",
        "with_initializer",
        "yield_statement"
      ]
    },
    "cssFields": {
      "type": "string",
      "enum": []
    },
    "cssNodes": {
      "type": "string",
      "enum": [
        "adjacent_sibling_selector",
        "arguments",
        "at_keyword",
        "at_rule",
        "attribute_name",
        "attribute_selector",
        "binary_expression",
        "binary_query",
        "block",
        "call_expression",
        "charset_statement",
        "child_selector",
        "class_name",
        "class_selector",
        "color_value",
        "comment",
        "declaration",
        "descendant_selector",
        "escape_sequence",
        "feature_name",
        "feature_query",
        "float_value",
        "from",
        "function_name",
        "grid_value",
        "id_name",
        "id_selector",
        "identifier",
        "import_statement",
        "important",
        "integer_value",
        "js_comment",
        "keyframe_block",
        "keyframe_block_list",
        "keyframes_name",
        "keyframes_statement",
        "keyword_query",
        "media_statement",
        "namespace_name",
        "namespace_selector",
        "namespace_statement",
        "nesting_selector",
        "parenthesized_query",
        "parenthesized_value",
        "plain_value",
        "postcss_statement",
        "property_name",
        "pseudo_class_selector",
        "pseudo_element_selector",
        "rule_set",
        "selector_query",
        "selectors",
        "sibling_selector",
        "string_content",
        "string_value",
        "stylesheet",
        "supports_statement",
        "tag_name",
        "to",
        "unary_query",
        "unit",
        "universal_selector"
      ]
    },
    "elixirFields": {
      "type": "string",
      "enum": [
        "key",
        "left",
        "operand",
        "operator",
        "quoted_end",
        "quoted_start",
        "right",
        "target"
      ]
    },
    "elixirNodes": {
      "type": "string",
      "enum": [
        "access_call",
        "after_block",
        "alias",
        "anonymous_function",
        "arguments",
        "atom",
        "binary_operator",
        "bitstring",
        "block",
        "body",
        "boolean",
        "call",
        "catch_block",
        "char",
        "charlist",
        "comment",
        "do_block",
        "dot",
        "else_block",
        "escape_sequence",
        "float",
        "identifier",
        "integer",
        "interpolation",
        "keyword",
        "keywords",
        "list",
        "map",
        "map_content",
        "nil",
        "operator_identifier",
        "pair",
        "quoted_atom",
        "quoted_content",
        "quoted_keyword",
        "rescue_block",
        "sigil",
        "sigil_modifiers",
        "sigil_name",
        "source",
        "stab_clause",
        "string",
        "struct",
        "tuple",
        "unary_operator"
      ]
    },
    "goFields": {
      "type": "string",
      "enum": [
        "alias",
        "alternative",
        "arguments",
        "body",
        "capacity",
        "channel",
        "communication",
        "condition",
        "consequence",
        "element",
        "end",
        "field",
        "function",
        "index",
        "initializer",
        "key",
        "label",
        "left",
        "length",
        "name",
        "operand",
        "operator",
        "package",
        "parameters",
        "path",
        "receiver",
        "result",
        "right",
        "start",
        "tag",
        "type",
        "type_arguments",
        "type_parameters",
        "update"
      ]
    },
    "goNodes": {
      "type": "string",
      "enum": [
        "argument_list",
        "array_type",
        "assignment_statement",
        "binary_expression",
        "blank_identifier",
        "block",
        "break_statement",
        "call_expression",
        "channel_type",
        "comment",
        "communication_case",
        "composite_literal",
        "const_declaration",
        "const_spec",
        "continue_statement",
        "dec_statement",
        "default_case",
        "defer_statement",
        "dot",
        "empty_statement",
        "escape_sequence",
        "expression_case",
        "expression_list",
        "expression_statement",
        "expression_switch_statement",
        "fallthrough_statement",
        "false",
        "field_declaration",
        "field_declaration_list",
        "field_identifier",
        "float_literal",
        "for_clause",
        "for_statement",
        "func_literal",
        "function_declaration",
        "function_type",
        "generic_type",
        "go_statement",
        "goto_statement",
        "identifier",
        "if_statement",
        "imaginary_literal",
        "implicit_length_array_type",
        "import_declaration",
        "import_spec",
        "import_spec_list",
        "inc_statement",
        "index_expression",
        "int_literal",
        "interface_type",
        "interpreted_string_literal",
        "interpreted_string_literal_content",
        "iota",
        "keyed_element",
        "label_name",
        "labeled_statement",
        "literal_element",
        "literal_value",
        "map_type",
        "method_declaration",
        "method_elem",
        "negated_type",
        "nil",
        "package_clause",
        "package_identifier",
        "parameter_declaration",
        "parameter_list",
        "parenthesized_expression",
        "parenthesized_type",
        "pointer_type",
        "qualified_type",
        "range_clause",
        "raw_string_literal",
        "raw_string_literal_content",
        "receive_statement",
        "return_statement",
        "rune_literal",
        "select_statement",
        "selector_expression",
        "send_statement",
        "short_var_declaration",
        "slice_expression",
        "slice_type",
        "source_file",
        "struct_type",
        "true",
        "type_alias",
        "type_arguments",
        "type_assertion_expression",
        "type_case",
        "type_constraint",
        "type_conversion_expression",
        "type_declaration",
        "type_elem",
        "type_identifier",
        "type_instantiation_expression",
        "type_parameter_declaration",
        "type_parameter_list",
        "type_spec",
        "type_switch_statement",
        "unary_expression",
        "var_declaration",
        "var_spec",
        "var_spec_list",
        "variadic_argument",
        "variadic_parameter_declaration"
      ]
    },
    "haskellFields": {
      "type": "string",
      "enum": [
        "alias",
        "alternative",
        "alternatives",
        "argument",
        "arrow",
        "associativity",
        "bind",
        "binds",
        "body",
        "calling_convention",
        "children",
        "classes",
        "classifier",
        "closed_family",
        "constraint",
        "constructor",
        "constructors",
        "context",
        "decl",
        "declaration",
        "declarations",
        "deriving",
        "determined",
        "element",
        "else",
        "entity",
        "equation",
        "export",
        "exports",
        "expression",
        "field",
        "fields",
        "forall",
        "from",
        "function",
        "fundep",
        "fundeps",
        "guard",
        "guards",
        "id",
        "if",
        "implicit",
        "import",
        "imports",
        "key",
        "kind",
        "left_operand",
        "match",
        "matched",
        "minus",
        "module",
        "multiplicity",
        "name",
        "names",
        "namespace",
        "number",
        "operator",
        "package",
        "parameter",
        "parens",
        "pattern",
        "patterns",
        "precedence",
        "qualifier",
        "qualifiers",
        "quantifier",
        "quoter",
        "result",
        "right_operand",
        "role",
        "safety",
        "signature",
        "statement",
        "step",
        "strategy",
        "subfield",
        "synonym",
        "then",
        "to",
        "transformation",
        "type",
        "variable",
        "variables"
      ]
    },
    "haskellNodes": {
      "type": "string",
      "enum": [
        "abstract_family",
        "all_names",
        "alternative",
        "alternatives",
        "annotated",
        "apply",
        "arithmetic_sequence",
        "as",
        "associated_type",
        "bind",
        "binding_list",
        "boolean",
        "calling_convention",
        "case",
        "char",
        "children",
        "class",
        "class_declarations",
        "comment",
        "conditional",
        "constructor",
        "constructor_operator",
        "constructor_synonym",
        "constructor_synonyms",
        "context",
        "cpp",
        "data_constructor",
        "data_constructors",
        "data_family",
        "data_instance",
        "data_type",
        "declarations",
        "default_signature",
        "default_types",
        "deriving",
        "deriving_instance",
        "deriving_strategy",
        "do",
        "do_module",
        "empty_list",
        "entity",
        "equation",
        "equations",
        "error_sentinel",
        "exp",
        "explicit_type",
        "export",
        "exports",
        "field",
        "field_name",
        "field_path",
        "field_pattern",
        "field_update",
        "fields",
        "fixity",
        "float",
        "forall",
        "forall_required",
        "foreign_export",
        "foreign_import",
        "function",
        "function_head_parens",
        "fundep",
        "fundeps",
        "gadt_constructor",
        "gadt_constructors",
        "generator",
        "group",
        "guards",
        "haddock",
        "haskell",
        "header",
        "implicit_parameter",
        "implicit_variable",
        "import",
        "import_list",
        "import_name",
        "import_package",
        "imports",
        "inferred",
        "infix",
        "infix_id",
        "instance",
        "instance_declarations",
        "integer",
        "invisible",
        "irrefutable",
        "kind_application",
        "kind_signature",
        "label",
        "lambda",
        "lambda_case",
        "lambda_cases",
        "lazy_field",
        "left_section",
        "let",
        "let_in",
        "linear_function",
        "list",
        "list_comprehension",
        "literal",
        "local_binds",
        "match",
        "modifier",
        "module",
        "module_export",
        "module_id",
        "multi_way_if",
        "name",
        "namespace",
        "negation",
        "newtype",
        "newtype_constructor",
        "operator",
        "parens",
        "pattern_guard",
        "pattern_synonym",
        "patterns",
        "pragma",
        "prefix",
        "prefix_id",
        "prefix_list",
        "prefix_tuple",
        "prefix_unboxed_sum",
        "prefix_unboxed_tuple",
        "projection",
        "projection_selector",
        "promoted",
        "qualified",
        "qualifiers",
        "quantified_variables",
        "quasiquote",
        "quasiquote_body",
        "quote",
        "quoted_decls",
        "quoted_expression",
        "quoted_pattern",
        "quoted_type",
        "quoter",
        "rec",
        "record",
        "right_section",
        "role_annotation",
        "safety",
        "signature",
        "special",
        "splice",
        "star",
        "strict",
        "strict_field",
        "string",
        "th_quoted_name",
        "top_splice",
        "transform",
        "tuple",
        "type_application",
        "type_binder",
        "type_family",
        "type_family_injectivity",
        "type_family_result",
        "type_instance",
        "type_params",
        "type_patterns",
        "type_role",
        "type_synomym",
        "typed_quote",
        "unboxed_sum",
        "unboxed_tuple",
        "unboxed_unit",
        "unit",
        "variable",
        "via",
        "view_pattern",
        "wildcard"
      ]
    },
    "htmlFields": {
      "type": "string",
      "enum": []
    },
    "htmlNodes": {
      "type": "string",
      "enum": [
        "attribute",
        "attribute_name",
        "attribute_value",
        "comment",
        "doctype",
        "document",
        "element",
        "end_tag",
        "entity",
        "erroneous_end_tag",
        "erroneous_end_tag_name",
        "quoted_attribute_value",
        "raw_text",
        "script_element",
        "self_closing_tag",
        "start_tag",
        "style_element",
        "tag_name",
        "text"
      ]
    },
    "javaFields": {
      "type": "string",
      "enum": [
        "alternative",
        "arguments",
        "array",
        "body",
        "condition",
        "consequence",
        "constructor",
        "declarator",
        "dimensions",
        "element",
        "field",
        "index",
        "init",
        "interfaces",
        "key",
        "left",
        "modifiers",
        "module",
        "modules",
        "name",
        "object",
        "operand",
        "operator",
        "package",
        "parameters",
        "pattern",
        "permits",
        "provided",
        "provider",
        "resources",
        "right",
        "scope",
        "superclass",
        "template_argument",
        "template_processor",
        "type",
        "type_arguments",
        "type_parameters",
        "update"
      ]
    },
    "javaNodes": {
      "type": "string",
      "enum": [
        "annotated_type",
        "annotation",
        "annotation_argument_list",
        "annotation_type_body",
        "annotation_type_declaration",
        "annotation_type_element_declaration",
        "argument_list",
        "array_access",
        "array_creation_expression",
        "array_initializer",
        "array_type",
        "assert_statement",
        "assignment_expression",
        "asterisk",
        "binary_expression",
        "binary_integer_literal",
        "block",
        "block_comment",
        "boolean_type",
        "break_statement",
        "cast_expression",
        "catch_clause",
        "catch_formal_parameter",
        "catch_type",
        "character_literal",
        "class_body",
        "class_declaration",
        "class_literal",
        "compact_constructor_declaration",
        "constant_declaration",
        "constructor_body",
        "constructor_declaration",
        "continue_statement",
        "decimal_floating_point_literal",
        "decimal_integer_literal",
        "dimensions",
        "dimensions_expr",
        "do_statement",
        "element_value_array_initializer",
        "element_value_pair",
        "enhanced_for_statement",
        "enum_body",
        "enum_body_declarations",
        "enum_constant",
        "enum_declaration",
        "escape_sequence",
        "explicit_constructor_invocation",
        "exports_module_directive",
        "expression_statement",
        "extends_interfaces",
        "false",
        "field_access",
        "field_declaration",
        "finally_clause",
        "floating_point_type",
        "for_statement",
        "formal_parameter",
        "formal_parameters",
        "generic_type",
        "guard",
        "hex_floating_point_literal",
        "hex_integer_literal",
        "identifier",
        "if_statement",
        "import_declaration",
        "inferred_parameters",
        "instanceof_expression",
        "integral_type",
        "interface_body",
        "interface_declaration",
        "labeled_statement",
        "lambda_expression",
        "line_comment",
        "local_variable_declaration",
        "marker_annotation",
        "method_declaration",
        "method_invocation",
        "method_reference",
        "modifiers",
        "module_body",
        "module_declaration",
        "multiline_string_fragment",
        "null_literal",
        "object_creation_expression",
        "octal_integer_literal",
        "opens_module_directive",
        "package_declaration",
        "parenthesized_expression",
        "pattern",
        "permits",
        "program",
        "provides_module_directive",
        "receiver_parameter",
        "record_declaration",
        "record_pattern",
        "record_pattern_body",
        "record_pattern_component",
        "requires_modifier",
        "requires_module_directive",
        "resource",
        "resource_specification",
        "return_statement",
        "scoped_identifier",
        "scoped_type_identifier",
        "spread_parameter",
        "static_initializer",
        "string_fragment",
        "string_interpolation",
        "string_literal",
        "super",
        "super_interfaces",
        "superclass",
        "switch_block",
        "switch_block_statement_group",
        "switch_expression",
        "switch_label",
        "switch_rule",
        "synchronized_statement",
        "template_expression",
        "ternary_expression",
        "this",
        "throw_statement",
        "throws",
        "true",
        "try_statement",
        "try_with_resources_statement",
        "type_arguments",
        "type_bound",
        "type_identifier",
        "type_list",
        "type_parameter",
        "type_parameters",
        "type_pattern",
        "unary_expression",
        "underscore_pattern",
        "update_expression",
        "uses_module_directive",
        "variable_declarator",
        "void_type",
        "while_statement",
        "wildcard",
        "yield_statement"
      ]
    },
    "javascriptFields": {
      "type": "string",
      "enum": [
        "alias",
        "alternative",
        "argument",
        "arguments",
        "attribute",
        "body",
        "close_tag",
        "condition",
        "consequence",
        "constructor",
        "declaration",
        "decorator",
        "finalizer",
        "flags",
        "function",
        "handler",
        "increment",
        "index",
        "initializer",
        "key",
        "kind",
        "label",
        "left",
        "member",
        "name",
        "object",
        "open_tag",
        "operator",
        "optional_chain",
        "parameter",
        "parameters",
        "pattern",
        "property",
        "right",
        "source"
      ]
    },
    "javascriptNodes": {
      "type": "string",
      "enum": [
        "arguments",
        "array",
        "array_pattern",
        "arrow_function",
        "assignment_expression",
        "assignment_pattern",
        "augmented_assignment_expression",
        "await_expression",
        "binary_expression",
        "break_statement",
        "call_expression",
        "catch_clause",
        "class",
        "class_body",
        "class_declaration",
        "class_heritage",
        "class_static_block",
        "comment",
        "computed_property_name",
        "continue_statement",
        "debugger_statement",
        "decorator",
        "do_statement",
        "else_clause",
        "empty_statement",
        "escape_sequence",
        "export_clause",
        "export_specifier",
        "export_statement",
        "expression_statement",
        "false",
        "field_definition",
        "finally_clause",
        "for_in_statement",
        "for_statement",
        "formal_parameters",
        "function_declaration",
        "function_expression",
        "generator_function",
        "generator_function_declaration",
        "hash_bang_line",
        "html_character_reference",
        "html_comment",
        "identifier",
        "if_statement",
        "import",
        "import_attribute",
        "import_clause",
        "import_specifier",
        "import_statement",
        "jsx_attribute",
        "jsx_closing_element",
        "jsx_element",
        "jsx_expression",
        "jsx_namespace_name",
        "jsx_opening_element",
        "jsx_self_closing_element",
        "jsx_text",
        "labeled_statement",
        "lexical_declaration",
        "member_expression",
        "meta_property",
        "method_definition",
        "named_imports",
        "namespace_export",
        "namespace_import",
        "new_expression",
        "null",
        "number",
        "object",
        "object_assignment_pattern",
        "object_pattern",
        "optional_chain",
        "pair",
        "pair_pattern",
        "parenthesized_expression",
        "private_property_identifier",
        "program",
        "property_identifier",
        "regex",
        "regex_flags",
        "regex_pattern",
        "rest_pattern",
        "return_statement",
        "sequence_expression",
        "shorthand_property_identifier",
        "shorthand_property_identifier_pattern",
        "spread_element",
        "statement_block",
        "statement_identifier",
        "string",
        "string_fragment",
        "subscript_expression",
        "super",
        "switch_body",
        "switch_case",
        "switch_default",
        "switch_statement",
        "template_string",
        "template_substitution",
        "ternary_expression",
        "this",
        "throw_statement",
        "true",
        "try_statement",
        "unary_expression",
        "undefined",
        "update_expression",
        "variable_declaration",
        "variable_declarator",
        "while_statement",
        "with_statement",
        "yield_expression"
      ]
    },
    "jsonFields": {
      "type": "string",
      "enum": [
        "key"
      ]
    },
    "jsonNodes": {
      "type": "string",
      "enum": [
        "array",
        "comment",
        "document",
        "escape_sequence",
        "false",
        "null",
        "number",
        "object",
        "pair",
        "string",
        "string_content",
        "true"
      ]
    },
    "kotlinFields": {
      "type": "string",
      "enum": [
        "alternative",
        "condition"
      ]
    },
    "kotlinNodes": {
      "type": "string",
      "enum": [
        "additive_expression",
        "annotated_lambda",
        "annotation",
        "anonymous_function",
        "anonymous_initializer",
        "as_expression",
        "assignment",
        "bin_literal",
        "binding_pattern_kind",
        "boolean_literal",
        "call_expression",
        "call_suffix",
        "callable_reference",
        "catch_block",
        "character_escape_seq",
        "character_literal",
        "check_expression",
        "class_body",
        "class_declaration",
        "class_modifier",
        "class_parameter",
        "collection_literal",
        "companion_object",
        "comparison_expression",
        "conjunction_expression",
        "constructor_delegation_call",
        "constructor_invocation",
        "control_structure_body",
        "delegation_specifier",
        "directly_assignable_expression",
        "disjunction_expression",
        "do_while_statement",
        "elvis_expression",
        "enum_class_body",
        "enum_entry",
        "equality_expression",
        "explicit_delegation",
        "file_annotation",
        "finally_block",
        "for_statement",
        "function_body",
        "function_declaration",
        "function_modifier",
        "function_type",
        "function_type_parameters",
        "function_value_parameters",
        "getter",
        "hex_literal",
        "identifier",
        "if_expression",
        "import_alias",
        "import_header",
        "import_list",
        "indexing_expression",
        "indexing_suffix",
        "infix_expression",
        "inheritance_modifier",
        "integer_literal",
        "interpolated_expression",
        "interpolated_identifier",
        "jump_expression",
        "label",
        "lambda_literal",
        "lambda_parameters",
        "line_comment",
        "long_literal",
        "member_modifier",
        "modifiers",
        "multi_variable_declaration",
        "multiline_comment",
        "multiplicative_expression",
        "navigation_expression",
        "navigation_suffix",
        "not_nullable_type",
        "null_literal",
        "nullable_type",
        "object_declaration",
        "object_literal",
        "package_header",
        "parameter",
        "parameter_modifier",
        "parameter_modifiers",
        "parameter_with_optional_type",
        "parenthesized_expression",
        "parenthesized_type",
        "parenthesized_user_type",
        "platform_modifier",
        "postfix_expression",
        "prefix_expression",
        "primary_constructor",
        "property_declaration",
        "property_delegate",
        "property_modifier",
        "range_expression",
        "range_test",
        "real_literal",
        "reification_modifier",
        "secondary_constructor",
        "setter",
        "shebang_line",
        "simple_identifier",
        "source_file",
        "spread_expression",
        "statements",
        "string_content",
        "string_literal",
        "super_expression",
        "this_expression",
        "try_expression",
        "type_alias",
        "type_arguments",
        "type_constraint",
        "type_constraints",
        "type_identifier",
        "type_modifiers",
        "type_parameter",
        "type_parameter_modifiers",
        "type_parameters",
        "type_projection",
        "type_projection_modifiers",
        "type_test",
        "unsigned_literal",
        "use_site_target",
        "user_type",
        "value_argument",
        "value_arguments",
        "variable_declaration",
        "variance_modifier",
        "visibility_modifier",
        "when_condition",
        "when_entry",
        "when_expression",
        "when_subject",
        "while_statement",
        "wildcard_import"
      ]
    },
    "luaFields": {
      "type": "string",
      "enum": [
        "alternative",
        "arguments",
        "attribute",
        "body",
        "clause",
        "condition",
        "consequence",
        "content",
        "end",
        "field",
        "left",
        "local_declaration",
        "method",
        "name",
        "operand",
        "parameters",
        "right",
        "start",
        "step",
        "table"
      ]
    },
    "luaNodes": {
      "type": "string",
      "enum": [
        "arguments",
        "assignment_statement",
        "attribute",
        "binary_expression",
        "block",
        "bracket_index_expression",
        "break_statement",
        "chunk",
        "comment",
        "comment_content",
        "do_statement",
        "dot_index_expression",
        "else_statement",
        "elseif_statement",
        "empty_statement",
        "escape_sequence",
        "expression_list",
        "false",
        "field",
        "for_generic_clause",
        "for_numeric_clause",
        "for_statement",
        "function_call",
        "function_declaration",
        "function_definition",
        "goto_statement",
        "hash_bang_line",
        "identifier",
        "if_statement",
        "label_statement",
        "method_index_expression",
        "nil",
        "number",
        "parameters",
        "parenthesized_expression",
        "repeat_statement",
        "return_statement",
        "string",
        "string_content",
        "table_constructor",
        "true",
        "unary_expression",
        "vararg_expression",
        "variable_declaration",
        "variable_list",
        "while_statement"
      ]
    },
    "phpFields": {
      "type": "string",
      "enum": [
        "alias",
        "alternative",
        "argument",
        "arguments",
        "attributes",
        "body",
        "condition",
        "conditional_expressions",
        "default_value",
        "end_tag",
        "final",
        "function",
        "identifier",
        "initialize",
        "left",
        "name",
        "object",
        "operator",
        "parameters",
        "prefix",
        "readonly",
        "reference_modifier",
        "return_expression",
        "return_type",
        "right",
        "scope",
        "static_modifier",
        "type",
        "update",
        "value"
      ]
    },
    "phpNodes": {
      "type": "string",
      "enum": [
        "abstract_modifier",
        "anonymous_class",
        "anonymous_function",
        "anonymous_function_use_clause",
        "argument",
        "arguments",
        "array_creation_expression",
        "array_element_initializer",
        "arrow_function",
        "assignment_expression",
        "attribute",
        "attribute_group",
        "attribute_list",
        "augmented_assignment_expression",
        "base_clause",
        "binary_expression",
        "boolean",
        "bottom_type",
        "break_statement",
        "by_ref",
        "case_statement",
        "cast_expression",
        "cast_type",
        "catch_clause",
        "class_constant_access_expression",
        "class_declaration",
        "class_interface_clause",
        "clone_expression",
        "colon_block",
        "comment",
        "compound_statement",
        "conditional_expression",
        "const_declaration",
        "const_element",
        "continue_statement",
        "declaration_list",
        "declare_directive",
        "declare_statement",
        "default_statement",
        "disjunctive_normal_form_type",
        "do_statement",
        "dynamic_variable_name",
        "echo_statement",
        "else_clause",
        "else_if_clause",
        "empty_statement",
        "encapsed_string",
        "enum_case",
        "enum_declaration",
        "enum_declaration_list",
        "error_suppression_expression",
        "escape_sequence",
        "exit_statement",
        "expression_statement",
        "final_modifier",
        "finally_clause",
        "float",
        "for_statement",
        "foreach_statement",
        "formal_parameters",
        "function_call_expression",
        "function_definition",
        "function_static_declaration",
        "global_declaration",
        "goto_statement",
        "heredoc",
        "heredoc_body",
        "heredoc_end",
        "heredoc_start",
        "if_statement",
        "include_expression",
        "include_once_expression",
        "integer",
        "interface_declaration",
        "intersection_type",
        "list_literal",
        "match_block",
        "match_condition_list",
        "match_conditional_expression",
        "match_default_expression",
        "match_expression",
        "member_access_expression",
        "member_call_expression",
        "method_declaration",
        "name",
        "named_label_statement",
        "named_type",
        "namespace_definition",
        "namespace_name",
        "namespace_use_clause",
        "namespace_use_declaration",
        "namespace_use_group",
        "nowdoc",
        "nowdoc_body",
        "nowdoc_string",
        "null",
        "nullsafe_member_access_expression",
        "nullsafe_member_call_expression",
        "object_creation_expression",
        "operation",
        "optional_type",
        "pair",
        "parenthesized_expression",
        "php_tag",
        "primitive_type",
        "print_intrinsic",
        "program",
        "property_declaration",
        "property_element",
        "property_hook",
        "property_hook_list",
        "property_promotion_parameter",
        "qualified_name",
        "readonly_modifier",
        "reference_assignment_expression",
        "reference_modifier",
        "relative_scope",
        "require_expression",
        "require_once_expression",
        "return_statement",
        "scoped_call_expression",
        "scoped_property_access_expression",
        "sentinel_error",
        "sequence_expression",
        "shell_command_expression",
        "simple_parameter",
        "static_modifier",
        "static_variable_declaration",
        "string",
        "string_content",
        "subscript_expression",
        "switch_block",
        "switch_statement",
        "throw_expression",
        "trait_declaration",
        "try_statement",
        "type_list",
        "unary_op_expression",
        "union_type",
        "unset_statement",
        "update_expression",
        "use_as_clause",
        "use_declaration",
        "use_instead_of_clause",
        "use_list",
        "var_modifier",
        "variable_name",
        "variadic_parameter",
        "variadic_placeholder",
        "variadic_unpacking",
        "visibility_modifier",
        "while_statement",
        "yield_expression"
      ]
    },
    "pythonFields": {
      "type": "string",
      "enum": [
        "alias",
        "alternative",
        "argument",
        "arguments",
        "attribute",
        "body",
        "cause",
        "code",
        "condition",
        "consequence",
        "definition",
        "expression",
        "format_specifier",
        "function",
        "guard",
        "key",
        "left",
        "module_name",
        "name",
        "object",
        "operator",
        "operators",
        "parameters",
        "return_type",
        "right",
        "subject",
        "subscript",
        "superclasses",
        "type",
        "type_conversion",
        "type_parameters"
      ]
    },
    "pythonNodes": {
      "type": "string",
      "enum": [
        "aliased_import",
        "argument_list",
        "as_pattern",
        "as_pattern_target",
        "assert_statement",
        "assignment",
        "attribute",
        "augmented_assignment",
        "await",
        "binary_operator",
        "block",
        "boolean_operator",
        "break_statement",
        "call",
        "case_clause",
        "case_pattern",
        "chevron",
        "class_definition",
        "class_pattern",
        "comment",
        "comparison_operator",
        "complex_pattern",
        "concatenated_string",
        "conditional_expression",
        "constrained_type",
        "continue_statement",
        "decorated_definition",
        "decorator",
        "default_parameter",
        "delete_statement",
        "dict_pattern",
        "dictionary",
        "dictionary_comprehension",
        "dictionary_splat",
        "dictionary_splat_pattern",
        "dotted_name",
        "elif_clause",
        "ellipsis",
        "else_clause",
        "escape_interpolation",
        "escape_sequence",
        "except_clause",
        "except_group_clause",
        "exec_statement",
        "expression_list",
        "expression_statement",
        "false",
        "finally_clause",
        "float",
        "for_in_clause",
        "for_statement",
        "format_expression",
        "format_specifier",
        "function_definition",
        "future_import_statement",
        "generator_expression",
        "generic_type",
        "global_statement",
        "identifier",
        "if_clause",
        "if_statement",
        "import_from_statement",
        "import_prefix",
        "import_statement",
        "integer",
        "interpolation",
        "keyword_argument",
        "keyword_pattern",
        "keyword_separator",
        "lambda",
        "lambda_parameters",
        "line_continuation",
        "list",
        "list_comprehension",
        "list_pattern",
        "list_splat",
        "list_splat_pattern",
        "match_statement",
        "member_type",
        "module",
        "named_expression",
        "none",
        "nonlocal_statement",
        "not_operator",
        "pair",
        "parameters",
        "parenthesized_expression",
        "parenthesized_list_splat",
        "pass_statement",
        "pattern_list",
        "positional_separator",
        "print_statement",
        "raise_statement",
        "relative_import",
        "return_statement",
        "set",
        "set_comprehension",
        "slice",
        "splat_pattern",
        "splat_type",
        "string",
        "string_content",
        "string_end",
        "string_start",
        "subscript",
        "true",
        "try_statement",
        "tuple",
        "tuple_pattern",
        "type",
        "type_alias_statement",
        "type_conversion",
        "type_parameter",
        "typed_default_parameter",
        "typed_parameter",
        "unary_operator",
        "union_pattern",
        "union_type",
        "while_statement",
        "wildcard_import",
        "with_clause",
        "with_item",
        "with_statement",
        "yield"
      ]
    },
    "rubyFields": {
      "type": "string",
      "enum": [
        "alias",
        "alternative",
        "alternatives",
        "arguments",
        "begin",
        "block",
        "body",
        "class",
        "clauses",
        "condition",
        "consequence",
        "else",
        "end",
        "exceptions",
        "guard",
        "handler",
        "key",
        "left",
        "locals",
        "method",
        "name",
        "object",
        "operand",
        "operator",
        "parameters",
        "pattern",
        "receiver",
        "right",
        "scope",
        "superclass",
        "value"
      ]
    },
    "rubyNodes": {
      "type": "string",
      "enum": [
        "alias",
        "alternative_pattern",
        "argument_list",
        "array",
        "array_pattern",
        "as_pattern",
        "assignment",
        "bare_string",
        "bare_symbol",
        "begin",
        "begin_block",
        "binary",
        "block",
        "block_argument",
        "block_body",
        "block_parameter",
        "block_parameters",
        "body_statement",
        "break",
        "call",
        "case",
        "case_match",
        "chained_string",
        "character",
        "class",
        "class_variable",
        "comment",
        "complex",
        "conditional",
        "constant",
        "delimited_symbol",
        "destructured_left_assignment",
        "destructured_parameter",
        "do",
        "do_block",
        "element_reference",
        "else",
        "elsif",
        "empty_statement",
        "encoding",
        "end_block",
        "ensure",
        "escape_sequence",
        "exception_variable",
        "exceptions",
        "expression_reference_pattern",
        "false",
        "file",
        "find_pattern",
        "float",
        "for",
        "forward_argument",
        "forward_parameter",
        "global_variable",
        "hash",
        "hash_key_symbol",
        "hash_pattern",
        "hash_splat_argument",
        "hash_splat_nil",
        "hash_splat_parameter",
        "heredoc_beginning",
        "heredoc_body",
        "heredoc_content",
        "heredoc_end",
        "identifier",
        "if",
        "if_guard",
        "if_modifier",
        "in",
        "in_clause",
        "instance_variable",
        "integer",
        "interpolation",
        "keyword_parameter",
        "keyword_pattern",
        "lambda",
        "lambda_parameters",
        "left_assignment_list",
        "line",
        "match_pattern",
        "method",
        "method_parameters",
        "module",
        "next",
        "nil",
        "operator",
        "operator_assignment",
        "optional_parameter",
        "pair",
        "parenthesized_pattern",
        "parenthesized_statements",
        "pattern",
        "program",
        "range",
        "rational",
        "redo",
        "regex",
        "rescue",
        "rescue_modifier",
        "rest_assignment",
        "retry",
        "return",
        "right_assignment_list",
        "scope_resolution",
        "self",
        "setter",
        "simple_symbol",
        "singleton_class",
        "singleton_method",
        "splat_argument",
        "splat_parameter",
        "string",
        "string_array",
        "string_content",
        "subshell",
        "super",
        "superclass",
        "symbol_array",
        "test_pattern",
        "then",
        "true",
        "unary",
        "undef",
        "uninterpreted",
        "unless",
        "unless_guard",
        "unless_modifier",
        "until",
        "until_modifier",
        "variable_reference_pattern",
        "when",
        "while",
        "while_modifier",
        "yield"
      ]
    },
    "rustFields": {
      "type": "string",
      "enum": [
        "alias",
        "alternative",
        "argument",
        "arguments",
        "body",
        "bounds",
        "condition",
        "consequence",
        "default_type",
        "doc",
        "element",
        "field",
        "function",
        "inner",
        "left",
        "length",
        "list",
        "macro",
        "name",
        "operator",
        "outer",
        "parameters",
        "path",
        "pattern",
        "return_type",
        "right",
        "trait",
        "type",
        "type_arguments",
        "type_parameters"
      ]
    },
    "rustNodes": {
      "type": "string",
      "enum": [
        "abstract_type",
        "arguments",
        "array_expression",
        "array_type",
        "assignment_expression",
        "associated_type",
        "async_block",
        "attribute",
        "attribute_item",
        "await_expression",
        "base_field_initializer",
        "binary_expression",
        "block",
        "block_comment",
        "boolean_literal",
        "bounded_type",
        "bracketed_type",
        "break_expression",
        "call_expression",
        "captured_pattern",
        "char_literal",
        "closure_expression",
        "closure_parameters",
        "compound_assignment_expr",
        "const_block",
        "const_item",
        "const_parameter",
        "constrained_type_parameter",
        "continue_expression",
        "crate",
        "declaration_list",
        "doc_comment",
        "dynamic_type",
        "else_clause",
        "empty_statement",
        "enum_item",
        "enum_variant",
        "enum_variant_list",
        "escape_sequence",
        "expression_statement",
        "extern_crate_declaration",
        "extern_modifier",
        "field_declaration",
        "field_declaration_list",
        "field_expression",
        "field_identifier",
        "field_initializer",
        "field_initializer_list",
        "field_pattern",
        "float_literal",
        "for_expression",
        "for_lifetimes",
        "foreign_mod_item",
        "fragment_specifier",
        "function_item",
        "function_modifiers",
        "function_signature_item",
        "function_type",
        "gen_block",
        "generic_function",
        "generic_type",
        "generic_type_with_turbofish",
        "higher_ranked_trait_bound",
        "identifier",
        "if_expression",
        "impl_item",
        "index_expression",
        "inner_attribute_item",
        "inner_doc_comment_marker",
        "integer_literal",
        "label",
        "let_chain",
        "let_condition",
        "let_declaration",
        "lifetime",
        "line_comment",
        "loop_expression",
        "macro_definition",
        "macro_invocation",
        "macro_rule",
        "match_arm",
        "match_block",
        "match_expression",
        "match_pattern",
        "metavariable",
        "mod_item",
        "mut_pattern",
        "mutable_specifier",
        "negative_literal",
        "never_type",
        "optional_type_parameter",
        "or_pattern",
        "ordered_field_declaration_list",
        "outer_doc_comment_marker",
        "parameter",
        "parameters",
        "parenthesized_expression",
        "pointer_type",
        "primitive_type",
        "qualified_type",
        "range_expression",
        "range_pattern",
        "raw_string_literal",
        "ref_pattern",
        "reference_expression",
        "reference_pattern",
        "reference_type",
        "remaining_field_pattern",
        "removed_trait_bound",
        "return_expression",
        "scoped_identifier",
        "scoped_type_identifier",
        "scoped_use_list",
        "self",
        "self_parameter",
        "shebang",
        "shorthand_field_identifier",
        "shorthand_field_initializer",
        "slice_pattern",
        "source_file",
        "static_item",
        "string_content",
        "string_literal",
        "struct_expression",
        "struct_item",
        "struct_pattern",
        "super",
        "token_binding_pattern",
        "token_repetition",
        "token_repetition_pattern",
        "token_tree",
        "token_tree_pattern",
        "trait_bounds",
        "trait_item",
        "try_block",
        "try_expression",
        "tuple_expression",
        "tuple_pattern",
        "tuple_struct_pattern",
        "tuple_type",
        "type_arguments",
        "type_binding",
        "type_cast_expression",
        "type_identifier",
        "type_item",
        "type_parameters",
        "unary_expression",
        "union_item",
        "unit_expression",
        "unit_type",
        "unsafe_block",
        "use_as_clause",
        "use_declaration",
        "use_list",
        "use_wildcard",
        "variadic_parameter",
        "visibility_modifier",
        "where_clause",
        "where_predicate",
        "while_expression",
        "yield_expression"
      ]
    },
    "scalaFields": {
      "type": "string",
      "enum": [
        "alias",
        "alternative",
        "arguments",
        "base",
        "body",
        "bound",
        "class_parameters",
        "condition",
        "consequence",
        "default_value",
        "derive",
        "enumerators",
        "extend",
        "extra",
        "field",
        "function",
        "interpolator",
        "lambda_start",
        "left",
        "name",
        "operator",
        "parameter_types",
        "parameters",
        "path",
        "pattern",
        "return_type",
        "right",
        "selector",
        "type",
        "type_arguments",
        "type_parameters"
      ]
    },
    "scalaNodes": {
      "type": "string",
      "enum": [
        "access_modifier",
        "access_qualifier",
        "alternative_pattern",
        "annotated_type",
        "annotation",
        "arguments",
        "arrow_renamed_identifier",
        "as_renamed_identifier",
        "ascription_expression",
        "assignment_expression",
        "binding",
        "bindings",
        "block",
        "block_comment",
        "boolean_literal",
        "call_expression",
        "capture_pattern",
        "case_block",
        "case_class_pattern",
        "case_clause",
        "catch_clause",
        "character_literal",
        "class_definition",
        "class_parameter",
        "class_parameters",
        "colon_argument",
        "comment",
        "compilation_unit",
        "compound_type",
        "context_bound",
        "contravariant_type_parameter",
        "covariant_type_parameter",
        "derives_clause",
        "do_while_expression",
        "enum_body",
        "enum_case_definitions",
        "enum_definition",
        "enumerator",
        "enumerators",
        "export_declaration",
        "extends_clause",
        "extension_definition",
        "field_expression",
        "finally_clause",
        "floating_point_literal",
        "for_expression",
        "full_enum_case",
        "function_declaration",
        "function_definition",
        "function_type",
        "generic_function",
        "generic_type",
        "given_conditional",
        "given_definition",
        "given_pattern",
        "guard",
        "identifier",
        "identifiers",
        "if_expression",
        "import_declaration",
        "indented_block",
        "indented_cases",
        "infix_expression",
        "infix_modifier",
        "infix_pattern",
        "infix_type",
        "inline_modifier",
        "instance_expression",
        "integer_literal",
        "interpolated_string",
        "interpolated_string_expression",
        "interpolation",
        "lambda_expression",
        "lazy_parameter_type",
        "literal_type",
        "lower_bound",
        "macro_body",
        "match_expression",
        "match_type",
        "modifiers",
        "name_and_type",
        "named_pattern",
        "named_tuple_pattern",
        "named_tuple_type",
        "namespace_selectors",
        "namespace_wildcard",
        "null_literal",
        "object_definition",
        "opaque_modifier",
        "open_modifier",
        "operator_identifier",
        "package_clause",
        "package_identifier",
        "package_object",
        "parameter",
        "parameter_types",
        "parameters",
        "parenthesized_expression",
        "postfix_expression",
        "prefix_expression",
        "projected_type",
        "quote_expression",
        "refinement",
        "repeat_pattern",
        "repeated_parameter_type",
        "return_expression",
        "self_type",
        "simple_enum_case",
        "singleton_type",
        "splice_expression",
        "stable_identifier",
        "stable_type_identifier",
        "string",
        "structural_type",
        "template_body",
        "throw_expression",
        "trait_definition",
        "transparent_modifier",
        "try_expression",
        "tuple_expression",
        "tuple_pattern",
        "tuple_type",
        "type_arguments",
        "type_case_clause",
        "type_definition",
        "type_identifier",
        "type_lambda",
        "type_parameters",
        "typed_pattern",
        "unit",
        "upper_bound",
        "using_directive",
        "using_directive_key",
        "using_directive_value",
        "val_declaration",
        "val_definition",
        "var_declaration",
        "var_definition",
        "view_bound",
        "while_expression",
        "wildcard",
        "with_template_body"
      ]
    },
    "swiftFields": {
      "type": "string",
      "enum": [
        "body",
        "bound_identifier",
        "captures",
        "collection",
        "computed_value",
        "condition",
        "constrained_type",
        "constructed_type",
        "data_contents",
        "declaration_kind",
        "default_value",
        "definition",
        "element",
        "end",
        "error",
        "expr",
        "external_name",
        "if_false",
        "if_nil",
        "if_true",
        "inherits_from",
        "interpolation",
        "item",
        "key",
        "lhs",
        "must_equal",
        "must_inherit",
        "mutability",
        "name",
        "op",
        "operation",
        "operator",
        "params",
        "raw_value",
        "reference_specifier",
        "result",
        "return_type",
        "rhs",
        "start",
        "suffix",
        "target",
        "text",
        "type",
        "value"
      ]
    },
    "swiftNodes": {
      "type": "string",
      "enum": [
        "_expression",
        "additive_expression",
        "array_literal",
        "array_type",
        "as_expression",
        "as_operator",
        "assignment",
        "associatedtype_declaration",
        "attribute",
        "availability_condition",
        "await_expression",
        "bang",
        "bin_literal",
        "bitwise_operation",
        "boolean_literal",
        "call_expression",
        "call_suffix",
        "capture_list",
        "capture_list_item",
        "catch_block",
        "catch_keyword",
        "check_expression",
        "class_body",
        "class_declaration",
        "comment",
        "comparison_expression",
        "computed_getter",
        "computed_modify",
        "computed_property",
        "computed_setter",
        "conjunction_expression",
        "constructor_expression",
        "constructor_suffix",
        "control_transfer_statement",
        "custom_operator",
        "default_keyword",
        "deinit_declaration",
        "deprecated_operator_declaration_body",
        "diagnostic",
        "dictionary_literal",
        "dictionary_type",
        "didset_clause",
        "directive",
        "directly_assignable_expression",
        "disjunction_expression",
        "do_statement",
        "else",
        "enum_class_body",
        "enum_entry",
        "enum_type_parameters",
        "equality_constraint",
        "equality_expression",
        "existential_type",
        "external_macro_definition",
        "for_statement",
        "fully_open_range",
        "function_body",
        "function_declaration",
        "function_modifier",
        "function_type",
        "getter_specifier",
        "guard_statement",
        "hex_literal",
        "identifier",
        "if_statement",
        "import_declaration",
        "infix_expression",
        "inheritance_constraint",
        "inheritance_modifier",
        "inheritance_specifier",
        "init_declaration",
        "integer_literal",
        "interpolated_expression",
        "key_path_expression",
        "key_path_string_expression",
        "lambda_function_type",
        "lambda_function_type_parameters",
        "lambda_literal",
        "lambda_parameter",
        "line_str_text",
        "line_string_literal",
        "macro_declaration",
        "macro_definition",
        "member_modifier",
        "metatype",
        "modifiers",
        "modify_specifier",
        "multi_line_str_text",
        "multi_line_string_literal",
        "multiline_comment",
        "multiplicative_expression",
        "mutation_modifier",
        "navigation_expression",
        "navigation_suffix",
        "nil_coalescing_expression",
        "oct_literal",
        "opaque_type",
        "open_end_range_expression",
        "open_start_range_expression",
        "operator_declaration",
        "optional_type",
        "ownership_modifier",
        "parameter",
        "parameter_modifier",
        "parameter_modifiers",
        "pattern",
        "postfix_expression",
        "precedence_group_attribute",
        "precedence_group_attributes",
        "precedence_group_declaration",
        "prefix_expression",
        "property_behavior_modifier",
        "property_declaration",
        "property_modifier",
        "protocol_body",
        "protocol_composition_type",
        "protocol_declaration",
        "protocol_function_declaration",
        "protocol_property_declaration",
        "protocol_property_requirements",
        "range_expression",
        "raw_str_continuing_indicator",
        "raw_str_end_part",
        "raw_str_interpolation",
        "raw_str_interpolation_start",
        "raw_str_part",
        "raw_string_literal",
        "real_literal",
        "regex_literal",
        "repeat_while_statement",
        "selector_expression",
        "self_expression",
        "setter_specifier",
        "shebang_line",
        "simple_identifier",
        "source_file",
        "statement_label",
        "statements",
        "str_escaped_char",
        "subscript_declaration",
        "super_expression",
        "switch_entry",
        "switch_pattern",
        "switch_statement",
        "ternary_expression",
        "throw_keyword",
        "throws",
        "try_expression",
        "try_operator",
        "tuple_expression",
        "tuple_type",
        "tuple_type_item",
        "type_annotation",
        "type_arguments",
        "type_constraint",
        "type_constraints",
        "type_identifier",
        "type_modifiers",
        "type_pack_expansion",
        "type_parameter",
        "type_parameter_modifiers",
        "type_parameter_pack",
        "type_parameters",
        "typealias_declaration",
        "user_type",
        "value_argument",
        "value_argument_label",
        "value_arguments",
        "value_binding_pattern",
        "value_pack_expansion",
        "value_parameter_pack",
        "visibility_modifier",
        "where_clause",
        "where_keyword",
        "while_statement",
        "wildcard_pattern",
        "willset_clause",
        "willset_didset_block"
      ]
    },
    "tsxFields": {
      "type": "string",
      "enum": [
        "alias",
        "alternative",
        "argument",
        "arguments",
        "attribute",
        "body",
        "close_tag",
        "condition",
        "consequence",
        "constraint",
        "constructor",
        "declaration",
        "decorator",
        "finalizer",
        "flags",
        "function",
        "handler",
        "increment",
        "index",
        "index_type",
        "initializer",
        "key",
        "kind",
        "label",
        "left",
        "module",
        "name",
        "object",
        "open_tag",
        "operator",
        "optional_chain",
        "parameter",
        "parameters",
        "pattern",
        "property",
        "return_type",
        "right",
        "sign",
        "source",
        "type",
        "type_arguments",
        "type_parameters"
      ]
    },
    "tsxNodes": {
      "type": "string",
      "enum": [
        "abstract_class_declaration",
        "abstract_method_signature",
        "accessibility_modifier",
        "adding_type_annotation",
        "ambient_declaration",
        "arguments",
        "array",
        "array_pattern",
        "array_type",
        "arrow_function",
        "as_expression",
        "asserts",
        "asserts_annotation",
        "assignment_expression",
        "assignment_pattern",
        "augmented_assignment_expression",
        "await_expression",
        "binary_expression",
        "break_statement",
        "call_expression",
        "call_signature",
        "catch_clause",
        "class",
        "class_body",
        "class_declaration",
        "class_heritage",
        "class_static_block",
        "comment",
        "computed_property_name",
        "conditional_type",
        "constraint",
        "construct_signature",
        "constructor_type",
        "continue_statement",
        "debugger_statement",
        "decorator",
        "default_type",
        "do_statement",
        "else_clause",
        "empty_statement",
        "enum_assignment",
        "enum_body",
        "enum_declaration",
        "escape_sequence",
        "existential_type",
        "export_clause",
        "export_specifier",
        "export_statement",
        "expression_statement",
        "extends_clause",
        "extends_type_clause",
        "false",
        "finally_clause",
        "flow_maybe_type",
        "for_in_statement",
        "for_statement",
        "formal_parameters",
        "function_declaration",
        "function_expression",
        "function_signature",
        "function_type",
        "generator_function",
        "generator_function_declaration",
        "generic_type",
        "hash_bang_line",
        "html_character_reference",
        "html_comment",
        "identifier",
        "if_statement",
        "implements_clause",
        "import",
        "import_alias",
        "import_attribute",
        "import_clause",
        "import_require_clause",
        "import_specifier",
        "import_statement",
        "index_signature",
        "index_type_query",
        "infer_type",
        "instantiation_expression",
        "interface_body",
        "interface_declaration",
        "internal_module",
        "intersection_type",
        "jsx_attribute",
        "jsx_closing_element",
        "jsx_element",
        "jsx_expression",
        "jsx_namespace_name",
        "jsx_opening_element",
        "jsx_self_closing_element",
        "jsx_text",
        "labeled_statement",
        "lexical_declaration",
        "literal_type",
        "lookup_type",
        "mapped_type_clause",
        "member_expression",
        "meta_property",
        "method_definition",
        "method_signature",
        "module",
        "named_imports",
        "namespace_export",
        "namespace_import",
        "nested_identifier",
        "nested_type_identifier",
        "new_expression",
        "non_null_expression",
        "null",
        "number",
        "object",
        "object_assignment_pattern",
        "object_pattern",
        "object_type",
        "omitting_type_annotation",
        "opting_type_annotation",
        "optional_chain",
        "optional_parameter",
        "optional_type",
        "override_modifier",
        "pair",
        "pair_pattern",
        "parenthesized_expression",
        "parenthesized_type",
        "predefined_type",
        "private_property_identifier",
        "program",
        "property_identifier",
        "property_signature",
        "public_field_definition",
        "readonly_type",
        "regex",
        "regex_flags",
        "regex_pattern",
        "required_parameter",
        "rest_pattern",
        "rest_type",
        "return_statement",
        "satisfies_expression",
        "sequence_expression",
        "shorthand_property_identifier",
        "shorthand_property_identifier_pattern",
        "spread_element",
        "statement_block",
        "statement_identifier",
        "string",
        "string_fragment",
        "subscript_expression",
        "super",
        "switch_body",
        "switch_case",
        "switch_default",
        "switch_statement",
        "template_literal_type",
        "template_string",
        "template_substitution",
        "template_type",
        "ternary_expression",
        "this",
        "this_type",
        "throw_statement",
        "true",
        "try_statement",
        "tuple_type",
        "type_alias_declaration",
        "type_annotation",
        "type_arguments",
        "type_identifier",
        "type_parameter",
        "type_parameters",
        "type_predicate",
        "type_predicate_annotation",
        "type_query",
        "unary_expression",
        "undefined",
        "union_type",
        "update_expression",
        "variable_declaration",
        "variable_declarator",
        "while_statement",
        "with_statement",
        "yield_expression"
      ]
    },
    "typescriptFields": {
      "type": "string",
      "enum": [
        "alias",
        "alternative",
        "argument",
        "arguments",
        "body",
        "condition",
        "consequence",
        "constraint",
        "constructor",
        "declaration",
        "decorator",
        "finalizer",
        "flags",
        "function",
        "handler",
        "increment",
        "index",
        "index_type",
        "initializer",
        "key",
        "kind",
        "label",
        "left",
        "module",
        "name",
        "object",
        "operator",
        "optional_chain",
        "parameter",
        "parameters",
        "pattern",
        "property",
        "return_type",
        "right",
        "sign",
        "source",
        "type",
        "type_arguments",
        "type_parameters"
      ]
    },
    "typescriptNodes": {
      "type": "string",
      "enum": [
        "abstract_class_declaration",
        "abstract_method_signature",
        "accessibility_modifier",
        "adding_type_annotation",
        "ambient_declaration",
        "arguments",
        "array",
        "array_pattern",
        "array_type",
        "arrow_function",
        "as_expression",
        "asserts",
        "asserts_annotation",
        "assignment_expression",
        "assignment_pattern",
        "augmented_assignment_expression",
        "await_expression",
        "binary_expression",
        "break_statement",
        "call_expression",
        "call_signature",
        "catch_clause",
        "class",
        "class_body",
        "class_declaration",
        "class_heritage",
        "class_static_block",
        "comment",
        "computed_property_name",
        "conditional_type",
        "constraint",
        "construct_signature",
        "constructor_type",
        "continue_statement",
        "debugger_statement",
        "decorator",
        "default_type",
        "do_statement",
        "else_clause",
        "empty_statement",
        "enum_assignment",
        "enum_body",
        "enum_declaration",
        "escape_sequence",
        "existential_type",
        "export_clause",
        "export_specifier",
        "export_statement",
        "expression_statement",
        "extends_clause",
        "extends_type_clause",
        "false",
        "finally_clause",
        "flow_maybe_type",
        "for_in_statement",
        "for_statement",
        "formal_parameters",
        "function_declaration",
        "function_expression",
        "function_signature",
        "function_type",
        "generator_function",
        "generator_function_declaration",
        "generic_type",
        "hash_bang_line",
        "html_comment",
        "identifier",
        "if_statement",
        "implements_clause",
        "import",
        "import_alias",
        "import_attribute",
        "import_clause",
        "import_require_clause",
        "import_specifier",
        "import_statement",
        "index_signature",
        "index_type_query",
        "infer_type",
        "instantiation_expression",
        "interface_body",
        "interface_declaration",
        "internal_module",
        "intersection_type",
        "jsx_text",
        "labeled_statement",
        "lexical_declaration",
        "literal_type",
        "lookup_type",
        "mapped_type_clause",
        "member_expression",
        "meta_property",
        "method_definition",
        "method_signature",
        "module",
        "named_imports",
        "namespace_export",
        "namespace_import",
        "nested_identifier",
        "nested_type_identifier",
        "new_expression",
        "non_null_expression",
        "null",
        "number",
        "object",
        "object_assignment_pattern",
        "object_pattern",
        "object_type",
        "omitting_type_annotation",
        "opting_type_annotation",
        "optional_chain",
        "optional_parameter",
        "optional_type",
        "override_modifier",
        "pair",
        "pair_pattern",
        "parenthesized_expression",
        "parenthesized_type",
        "predefined_type",
        "private_property_identifier",
        "program",
        "property_identifier",
        "property_signature",
        "public_field_definition",
        "readonly_type",
        "regex",
        "regex_flags",
        "regex_pattern",
        "required_parameter",
        "rest_pattern",
        "rest_type",
        "return_statement",
        "satisfies_expression",
        "sequence_expression",
        "shorthand_property_identifier",
        "shorthand_property_identifier_pattern",
        "spread_element",
        "statement_block",
        "statement_identifier",
        "string",
        "string_fragment",
        "subscript_expression",
        "super",
        "switch_body",
        "switch_case",
        "switch_default",
        "switch_statement",
        "template_literal_type",
        "template_string",
        "template_substitution",
        "template_type",
        "ternary_expression",
        "this",
        "this_type",
        "throw_statement",
        "true",
        "try_statement",
        "tuple_type",
        "type_alias_declaration",
        "type_annotation",
        "type_arguments",
        "type_assertion",
        "type_identifier",
        "type_parameter",
        "type_parameters",
        "type_predicate",
        "type_predicate_annotation",
        "type_query",
        "unary_expression",
        "undefined",
        "union_type",
        "update_expression",
        "variable_declaration",
        "variable_declarator",
        "while_statement",
        "with_statement",
        "yield_expression"
      ]
    },
    "yamlFields": {
      "type": "string",
      "enum": [
        "key"
      ]
    },
    "yamlNodes": {
      "type": "string",
      "enum": [
        "alias",
        "alias_name",
        "anchor",
        "anchor_name",
        "block_mapping",
        "block_mapping_pair",
        "block_node",
        "block_scalar",
        "block_sequence",
        "block_sequence_item",
        "boolean_scalar",
        "comment",
        "directive_name",
        "directive_parameter",
        "document",
        "double_quote_scalar",
        "escape_sequence",
        "float_scalar",
        "flow_mapping",
        "flow_node",
        "flow_pair",
        "flow_sequence",
        "integer_scalar",
        "null_scalar",
        "plain_scalar",
        "reserved_directive",
        "single_quote_scalar",
        "stream",
        "string_scalar",
        "tag",
        "tag_directive",
        "tag_handle",
        "tag_prefix",
        "yaml_directive",
        "yaml_version"
      ]
    }
  }
}